# Generated by Django 5.1 on 2024-08-18 14:08

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('usertype', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=50)),
                ('dob', models.DateField()),
                ('mobile', models.IntegerField()),
                ('gender', models.CharField(max_length=10)),
                ('nationality', models.CharField(max_length=50)),
                ('soilType', models.CharField(max_length=50)),
                ('primaryCrops', models.CharField(max_length=100)),
                ('ownership', models.CharField(max_length=50)),
                ('businessType', models.CharField(max_length=50)),
                ('primaryPurpose', models.CharField(max_length=100)),
                ('language', models.CharField(max_length=50)),
                ('town', models.CharField(max_length=50)),
                ('state', models.CharField(max_length=50)),
                ('pincode', models.IntegerField()),
                ('uname', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('password', models.CharField(max_length=50)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
